一、自己定义function
def hello():
    print('Howdy!')
    print('Howdy!!!')
    print('Hello there.')#def之后的是定义方法，下面hello（）是调用自己创建的方法

hello()
hello()
hello()


二、def Statements with Parameters

def hello(name):             #name是Parameters，相当于variable，在call调用时，就会有一个argument在里面
    print('Hello ' + name)

hello('Alice')              #‘Alice’就是argument
hello('Bob')

####方法（）括号里可以放变量
One special thing to note about parameters is that the value stored in a parameter is forgotten 
when the function returns. #不懂return
For example, if you added print(name) after hello('Bob') in the previous program, 
the program would give you a NameError because there is no variable named name. 
This variable was destroyed after the function call hello('Bob') had returned, 
so print(name) would refer to a name variable that does not exist.
#######################################################
def hello(name):
    print('Hello ' + name)

hello(str(4))
hello('Bob')
结果
Hello 4
Hello Bob

def hello(name):
    return 'Hello ' + name

print(hello(str(4)))     #return 练习，看这两个的区别 
hello('Bob')
结果
Hello 4
#######################################################


三、return Values and return Statements
import random
def getAnswer(answerNumber):
    if answerNumber == 1:
        return 'It is certain'             #给方法定义return value
    elif answerNumber == 2:
        return 'It is decidedly so'
    elif answerNumber == 3:
        return 'Yes'
    elif answerNumber == 4:
        return 'Reply hazy try again'
    elif answerNumber == 5:
        return 'Ask again later'
    elif answerNumber == 6:
        return 'Concentrate and ask again'
    elif answerNumber == 7:
        return 'My reply is no'
    elif answerNumber == 8:
        return 'Outlook not so good'
    elif answerNumber == 9:
        return 'Very doubtful'

r = random.randint(1,9)
fortune = getAnswer(r)
print(fortune)
print(r)

四、the none Value
>>> spam = print('Hello!')
Hello! 
>>> None == spam 
True
Python adds return None to the end of any func- tion definition with no return statement.
Python给不需要return语句的function，加了一个隐形的return none，例如方法print();len();input()

五、keyword Arguments and print()
1.end=''
print('Hello', end='') #end=''去掉后面的换行键。  print('Hello'+'World')==print('Hello','World')逗号和加号的作用一样
print('World')
结果
HelloWorld
2.sep=','
>>> print('cats', 'dogs', 'mice') 
cats dogs mice #有空格
>>> print('cats', 'dogs', 'mice', sep=',')
cats,dogs,mice#加了逗号

六、local and global Scope
local scope #我理解的是自己定义的方法，当被调用结束时，里面的变量都被销毁了
globle scope #定义方法之外的
例如：
def spam():       ####local scope
	eggs = 31337


spam()          ####globle scope
print(eggs)    #eggs是local scope里的变量，global scope不可以使用，因为在spam调用时已经被销毁了
结果
Traceback (most recent call last): 
 File "C:/test3784.py", line 4, in <module>
  print(eggs) 
NameError: name 'eggs' is not defined
1.Local Variables Cannot Be Used in the Global Scope
global scope不可以使用local scope里的变量（local variable）
def spam():
    eggs = 99
    ham = 10
    print(eggs)
spam()
print(ham)
结果
99#没打印ham，ham在spam调用后，里面变量销毁了
2.Global Variables Can Be Read from a Local Scope
local scope可以使用global scope的变量（global scope）
def spam():
    print(eggs)
eggs = 42
spam()
结果
42
3.Local and Global Variables with the Same Name
local variale和global variable不要使用相同的名字，虽然语法上没错，但是容易混淆
4.the global Statement(声明)
如果你想在local scope里调整global variable，那么就在local scope里使用global statement
结果global
例子
####################################################################
def spam():
    print(eggs)
    eggs = 'spam local'
eggs = 'global'
spam()
结果
UnboundLocalError: local variable 'eggs' referenced before assignment
######################################################################
This error happens because Python sees that there is an assignment statement for eggs in the spam() functionu
and therefore considers eggs to be local. But because print(eggs) is executed before eggs is assigned anything, 
the local variable eggs doesn’t exist. Python will not fall back to using the global eggs variable.
因为local scope里面有assignment‘=’赋值，所以认为eggs是local variable
5.让错误不要打扰其他人exception handling
code放在try里，然后把电脑里的提示错误放在except里
例子：
def spam(divideBy):
    return 42 / divideBy

print(spam(2))
print(spam(12))
print(spam(0))
print(spam(1))
结果
21.0
3.5
ZeroDivisionError: division by zero

#########################不要打扰别人
def spam(divideBy):
    try:
        return 42 / divideBy
    except ZeroDivisionError:
        print('Error: Invalid argument.')

print(spam(2))
print(spam(12))
print(spam(0))
print(spam(1))
结果
21.0
3.5
Error: Invalid argument.
None
42.0

