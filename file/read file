一、打开文件,操作文件，关闭文件
f = open(‘路径’，读写模式（默认只读，可以不写）)
#######################################
例子：

我的依依
在玩游戏嗷
是那传说的饥荒
with open('路径', 'mode模式，默认r只读', encoding='utf-8') as f:#打开文件
--------f.read()#f.read()读取全部
                #f.file(size)读取size个字符（一个汉字，一字母，一个换行符\n，一个标点符号是一个字符）
        #例如
        f.read()
        结果：
        '我的依依\n在玩游戏嗷\n是那传说的饥荒\n'
        f.read(12)
        结果：
        '我的依依\n在玩游戏嗷\n是'
--------f.readline()#将文件内容变为list，里面是许多str，一行内容是一个str，f.readline()调用一次打印一行，下一次调用，打印下一行
                    #f.readline(size)读取一行中的size个字符,如果重复调用并且加入size，会按照上一行没调用完字符的继续打印
        f.readline()
        结果：
        '我的依依\n'
        f.readline()
        f.readline()
        f.readline()
        f.readline()
        f.readline()
        f.readline()
        结果：
        '我的依依\n'
        '在玩游戏嗷\n'
        '是那传说的饥荒\n'
        ''
        ''
        ''
        f.readline(1)#第一行1个字符‘我’
        f.readline(2)#第一行2个字符‘的依‘
        f.readline(3)#第一行2个字符’依\n‘，虽然写了要调用三个
        f.readline(4)#第二行4个字符‘在玩游戏’
        f.readline(5)#第二行2个字符‘嗷\n’，虽然写了5个字符
        f.readline(3)#第三行3个字符‘是那传’
        '我'
        '的依'
        '依\n'
        '在玩游戏'
        '嗷\n'
        '是那传'
---------f.tell()#告诉你，光标位置执行完f.read()或f.readline()等操作，光标在哪个字节位置
         f.read(2)
         f.tell()
         结果：
         ‘我的’
         6#使用utf-8编码，汉字占两个字节
---------f.seek(0)#移动光标到文件开头
---------读取每一行，使用迭代
         for each_line in f:
              print(each_line)
         结果：
         我的依依
                    #print()给每一行后面又加了一个换行
         在玩游戏嗷

         是那传说的饥荒
with open('路径'，'w',encoding='utf-8') as f:
例子：

我的依依
在玩游戏嗷
是那传说的饥荒
--------f.write('1')
        结果：会导致已有的文件被覆盖，原来的内容被替代
        with open('新路径新文件名'，'w',encoding='utf-8') as f:#建立一个新的文件
                f.write('写入内容')
--------f.writelines(可迭代：列表，str)#f.write()只能是str
 二、文件打开模式
 ---默认'rt'可读，文本模式
 ---‘w’写入模式，如果文件存在，很危险，容易覆盖
 ---‘x’写入模式，安全，如果有相同文件，会报错
 ---‘a’写入模式，如果文件存在，会把内容加在末尾
 ---‘b’打开：二进制模式
 ---‘t’文本模式
 ---‘r’可读模式
 ---‘+’可读写模式，可以添加到其他模式 #######不懂
 ---‘U’通用换行符支持
                
        
        

        
        
        
        
        

